import { LightningElement,api,wire,track} from 'lwc';
import { getRecord, getFieldValue } from "lightning/uiRecordApi";
import Case_Number_FIELD from "@salesforce/schema/Case.CaseNumber";
import OBJECT_NAME from '@salesforce/apex/TaskManager.getObjectName';
import fetchTaskSetup from '@salesforce/apex/TaskManager.fetchTaskDepartmentRecords';
import CreateTasks from '@salesforce/apex/TaskManagerUtility.createTasks';
import { getObjectInfo } from 'lightning/uiObjectInfoApi';
import { getPicklistValues } from 'lightning/uiObjectInfoApi';
import {ShowToastEvent} from 'lightning/platformShowToastEvent';
import GET_TASK_RECORDS from  '@salesforce/apex/TaskManager.getTaskRecords';
import { refreshApex } from '@salesforce/apex';

const COLUMNS2 = [
  { label: 'Task Subject', fieldName: 'Subject__c' },
  { label: 'Department', fieldName: 'Department__c' },
  { label: 'Priority', fieldName: 'Priority__c' },
  { label: 'Task Type', fieldName: 'Task_Type__c' },
];

export default class Taskmanager extends LightningElement {

  columns2=COLUMNS2;
    
    isLoading=false;
    taskModal=false;
    createNewTask=false;
    createNewTaskFromSetup=true;
    taskObjectName;
    picklistName;
    @api recordId;

    newTaskClick(){
        this.taskModal=!this.taskModal;
        this.selectedRows=[];
        this.selectedIds=[];
    }

    closeModal(){
      this.taskModal=!this.taskModal;
      this.createNewTask=!this.createNewTask;
      this.createNewTaskFromSetup=!this.createNewTaskFromSetup;
    }

    submitDetails(){
      this.taskModal=!this.taskModal;
      this.createNewTask=!this.createNewTask;
      this.createNewTaskFromSetup=!this.createNewTaskFromSetup;
    }

    @track dummycolumns1=[];
    @track wiredTaskList = [];
    columns=[];
    taskRecords=[];
    trimRecords=[];
    currentPage =1;
    recordSize = 5;
    totalPage = 0;

    @wire(GET_TASK_RECORDS, {caseId:"$recordId"})
    taskRecordValues(result){

      this.wiredTaskList=result;
      if(result.data){
        let nameUrl;
        let linkFieldName=result.data.recordLinkField;
        var conts=result.data.columnValues;
  
    for(var key in conts){
      if(conts[key]===linkFieldName){
        this.dummycolumns1.push({label:key,fieldName:'nameUrl',type: 'url',typeAttributes: {label: { fieldName:conts[key]},target: '_blank'}});
      }
       else{
        this.dummycolumns1.push({label:key,fieldName:conts[key]});
       }
    }

     this.taskRecords=result.data.taskRec.map(row => { 
      nameUrl= `/${row.Id}`;
      return {...row , nameUrl} 
    })
      
    this.recordSize = Number(this.recordSize)
    this.totalPage = Math.ceil(this.taskRecords.length/this.recordSize)
    this.updateRecords()
    this.columns=JSON.parse(JSON.stringify(this.dummycolumns1));
     
  }
      if(result.error){
        console.log(result.error);
      }
    }

    @wire(getRecord, { recordId: "$recordId",fields: [Case_Number_FIELD]})
    case;

    get casenumber() {
        return getFieldValue(this.case.data,Case_Number_FIELD);
    }

    @wire(getObjectInfo, { objectApiName:'$taskObjectName'})
    TaskObjectInfo;

    @wire(getPicklistValues, { recordTypeId: '$objectInfo.data.defaultRecordTypeId', fieldApiName:'$picklistName'})
    taskPicklist;

    get taskStatus() {
      if (this.taskPicklist.data) {
        return this.taskPicklist.data.values.map((Value) => {
          return { label:Value.label, name:Value.value };
        });
      }
      return [];
    }

    @wire(OBJECT_NAME)
    taskObject({data,error}){
      if(data){
        this.taskObjectName=data;
          if(this.taskObjectName==='Acc_Task__c'){
          this.picklistName='Status__c';
          }
          else{
          this.picklistName='Status';
          }
       }
      if(error){
        console.log(error);
      }
    }
    

    @wire(fetchTaskSetup)
    taskSetupRecords;

    selectedRows=[];

    rowSelection(event){
      this.selectedRows=event.detail.selectedRows;
    }

    selectedIds=[];

    createTask(){

      this.isLoading=!this.isLoading;

    this.selectedRows.forEach((val)=>{
      this.selectedIds.push(val.Id);
    })
     
      CreateTasks({caseId:this.recordId,taskSetupId:this.selectedIds})
        .then(()=>{
          refreshApex(this.wiredTaskList);
          this.isLoading=!this.isLoading;
          const event = new ShowToastEvent({
            title: 'Success',
            message: 'Task Created Successfully!',
            variant: 'Success',
            mode: 'dismissable'
        });
           this.dispatchEvent(event);

        })
        
    }


    handleRadioChange(){
       this.selectedRows=[];
       this.selectedIds=[];
       this.createNewTask=!this.createNewTask;
       this.createNewTaskFromSetup=!this.createNewTaskFromSetup;
      }

    handleRadioChange2(){
      this.createNewTask=!this.createNewTask;
      this.createNewTaskFromSetup=!this.createNewTaskFromSetup;

      }


      get disablePrevious(){ 
        return this.currentPage<=1
    }
    get disableNext(){ 
        return this.currentPage>=this.totalPage
    }
    previousHandler(){ 
        if(this.currentPage>1){
            this.currentPage = this.currentPage-1
            this.updateRecords()
        }
    }
    nextHandler(){
        if(this.currentPage < this.totalPage){
            this.currentPage = this.currentPage+1
            this.updateRecords()
        }
    }

    updateRecords(){ 
        const start = (this.currentPage-1)*this.recordSize
        const end = this.recordSize*this.currentPage
        this.trimRecords = this.taskRecords.slice(start, end)
    }

}
